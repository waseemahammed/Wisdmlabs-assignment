root@ip-172-31-28-82:~# chef-client
Starting Chef Client, version 13.7.16
resolving cookbooks for run list: ["assesment::install_nginx", "assesment::install_php", "assesment::install_mysql", "assesment::deploy_php"]
Synchronizing Cookbooks:
  - assesment (0.1.0)
Installing Cookbook Gems:
Compiling Cookbooks...
Converging 11 resources
Recipe: assesment::install_nginx
  * execute[apt-get update] action run
    - execute sudo apt-get update
  * execute[install nginx] action run
    - execute sudo apt-get install nginx -y
Recipe: assesment::install_php
  * execute[Install php] action run
    - execute sudo apt-get install php-fpm php-mysql -y
  * service[php7.0-fpm] action restart
    - restart service service[php7.0-fpm]
  * cookbook_file[/etc/nginx/sites-available/default] action create
    - update content in file /etc/nginx/sites-available/default from 4b2b5e to f78109
    --- /etc/nginx/sites-available/default      2017-02-11 21:00:57.000000000 +0000
    +++ /etc/nginx/sites-available/.chef-default20180128-2150-1gg2ls1   2018-01-28 18:38:47.291622495 +0000
    @@ -1,5 +1,5 @@
    -##
    -# You should look at the following URL's in order to grasp a solid understanding
    +
    +#You should look at the following URL's in order to grasp a solid understanding
     # of Nginx configuration files in order to fully unleash the power of Nginx.
     # http://wiki.nginx.org/Pitfalls
     # http://wiki.nginx.org/QuickStart
    @@ -14,55 +14,55 @@
     # Default server configuration
     #
     server {
    -   listen 80 default_server;
    -   listen [::]:80 default_server;
    +        listen 80 default_server;
    +        listen [::]:80 default_server;

    -   # SSL configuration
    -   #
    -   # listen 443 ssl default_server;
    -   # listen [::]:443 ssl default_server;
    -   #
    -   # Note: You should disable gzip for SSL traffic.
    -   # See: https://bugs.debian.org/773332
    -   #
    -   # Read up on ssl_ciphers to ensure a secure configuration.
    -   # See: https://bugs.debian.org/765782
    -   #
    -   # Self signed certs generated by the ssl-cert package
    -   # Don't use them in a production server!
    -   #
    -   # include snippets/snakeoil.conf;
    +        # SSL configuration
    +        #
    +        # listen 443 ssl default_server;
    +        # listen [::]:443 ssl default_server;
    +        #
    +        # Note: You should disable gzip for SSL traffic.
    +        # See: https://bugs.debian.org/773332
    +        #
    +        # Read up on ssl_ciphers to ensure a secure configuration.
    +        # See: https://bugs.debian.org/765782
    +        #
    +        # Self signed certs generated by the ssl-cert package
    +        # Don't use them in a production server!
    +        #
    +        # include snippets/snakeoil.conf;

    -   root /var/www/html;
    +        root /var/www/html;

    -   # Add index.php to the list if you are using PHP
    -   index index.html index.htm index.nginx-debian.html;
    +        # Add index.php to the list if you are using PHP
    +        index index.php index.html index.htm index.nginx-debian.html;

    -   server_name _;
    +        server_name 127.0.0.1;

    -   location / {
    -           # First attempt to serve request as file, then
    -           # as directory, then fall back to displaying a 404.
    -           try_files $uri $uri/ =404;
    -   }
    +        location / {
    +                # First attempt to serve request as file, then
    +                # as directory, then fall back to displaying a 404.
    +                try_files $uri $uri/ =404;
    +        }

    -   # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    -   #
    -   #location ~ \.php$ {
    -   #       include snippets/fastcgi-php.conf;
    -   #
    -   #       # With php7.0-cgi alone:
    -   #       fastcgi_pass 127.0.0.1:9000;
    -   #       # With php7.0-fpm:
    -   #       fastcgi_pass unix:/run/php/php7.0-fpm.sock;
    -   #}
    +        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    +        #
    +        location ~ \.php$ {
    +                include snippets/fastcgi-php.conf;
    +        #
    +        #       # With php7.0-cgi alone:
    +        #       fastcgi_pass 127.0.0.1:9000;
    +        #       # With php7.0-fpm:
    +                fastcgi_pass unix:/run/php/php7.0-fpm.sock;
    +        }

    -   # deny access to .htaccess files, if Apache's document root
    -   # concurs with nginx's one
    -   #
    -   #location ~ /\.ht {
    -   #       deny all;
    -   #}
    +        # deny access to .htaccess files, if Apache's document root
    +        # concurs with nginx's one
    +        #
    +        location ~ /\.ht {
    +                deny all;
    +        }
     }


    @@ -72,16 +72,17 @@
     # to sites-enabled/ to enable it.
     #
     #server {
    -#  listen 80;
    -#  listen [::]:80;
    +#       listen 80;
    +#       listen [::]:80;
     #
    -#  server_name example.com;
    +#       server_name example.com;
     #
    -#  root /var/www/example.com;
    -#  index index.html;
    +#       root /var/www/example.com;
    +#       index index.html;
     #
    -#  location / {
    -#          try_files $uri $uri/ =404;
    -#  }
    +#       location / {
    +#               try_files $uri $uri/ =404;
    +#       }
     #}
    +
  * service[nginx] action reload
    - reload service service[nginx]
Recipe: assesment::install_mysql
  * cookbook_file[/tmp/mysql_install.sh] action create
    - create new file /tmp/mysql_install.sh
    - update content in file /tmp/mysql_install.sh from none to 154e38
    --- /tmp/mysql_install.sh   2018-01-28 18:38:47.443616738 +0000
    +++ /tmp/.chef-mysql_install20180128-2150-121gygr.sh        2018-01-28 18:38:47.439616889 +0000
    @@ -1 +1,16 @@
    +# Download and Install the Latest Updates for the OS
    +apt-get update && apt-get upgrade -y
    +
    +# Enable Ubuntu Firewall and allow SSH & MySQL Ports
    +ufw enable
    +ufw allow 22
    +ufw allow 3306
    +
    +# Install essential packages
    +apt-get -y install zsh htop
    +
    +# Install MySQL Server in a Non-Interactive mode. Default root password will be "root"
    +echo "mysql-server-5.6 mysql-server/root_password password root" | sudo debconf-set-selections
    +echo "mysql-server-5.6 mysql-server/root_password_again password root" | sudo debconf-set-selections
    +apt-get -y install mysql-server
    - change mode from '' to '0777'
  * execute[Install Mysql] action run
    - execute ./tmp/mysql_install.sh
  * cookbook_file[/tmp/mysql_secure_install.sh] action create
    - create new file /tmp/mysql_secure_install.sh
    - update content in file /tmp/mysql_secure_install.sh from none to 546e0d
    --- /tmp/mysql_secure_install.sh    2018-01-28 18:39:41.269797000 +0000
    +++ /tmp/.chef-mysql_secure_install20180128-2150-1vvnsp6.sh 2018-01-28 18:39:41.269797000 +0000
    @@ -1 +1,35 @@
    +#!/bin/bash
    +
    +sudo apt-get install aptitude -y
    +
    +MYSQL_ROOT_PASSWORD=root
    +
    +SECURE_MYSQL=$(expect -c "
    +set timeout 10
    +spawn mysql_secure_installation
    +expect \"Enter current password for root (enter for none):\"
    +send \"$MYSQL\r\"
    +expect \"Change the root password?\"
    +send \"n\r\"
    +expect \"Remove anonymous users?\"
    +send \"y\r\"
    +expect \"Disallow root login remotely?\"
    +send \"y\r\"
    +expect \"Remove test database and access to it?\"
    +send \"y\r\"
    +expect \"Reload privilege tables now?\"
    +send \"y\r\"
    +expect eof
    +")
    +
    +echo "$SECURE_MYSQL"
    +
    +aptitude -y purge expect
    +
    +sed -i 's/127\.0\.0\.1/0\.0\.0\.0/g' /etc/mysql/my.cnf
    +mysql -uroot -p -e 'USE mysql; UPDATE `user` SET `Host`="%" WHERE `User`="root" AND `Host`="localhost"; DELETE FROM `user` WHERE `Host` != "%" AND `User`="root"; FLUSH PRIVILEGES;'
    +
    +service mysql restart
    +
    +
    - change mode from '' to '0777'
  * execute[Secure Install Mysql] action run
    - execute ./tmp/mysql_secure_install.sh
Recipe: assesment::deploy_php
  * cookbook_file[/var/www/html/index.php] action create
    - create new file /var/www/html/index.php
    - update content in file /var/www/html/index.php from none to e21b0f
    --- /var/www/html/index.php 2018-01-28 18:39:54.025419914 +0000
    +++ /var/www/html/.chef-index20180128-2150-k3spv0.php       2018-01-28 18:39:54.025419914 +0000
    @@ -1 +1,42 @@
    +<?php
    +$servername = "localhost";
    +$username = "root";
    +$password = "root";
    +
    +try {
    +    $conn = new PDO("mysql:host=$servername;dbname=counter", $username, $password);
    +    // set the PDO error mode to exception
    +    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    +    echo "Connected successfully";
    +   // gets the user IP Address
    +   $user_ip=$_SERVER['REMOTE_ADDR'];
    +   $sql ="select userip from pageview where page='52.66.11.183' and userip='$user_ip'";
    +   $insert = "insert into pageview(page,userip) values('52.66.11.183','$user_ip')";
    +   $stmt = $conn->prepare($sql);
    +    $stmt->execute();
    +
    +    // set the resulting array to associative
    +    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);
    +
    +if (sizeOf($stmt->fetchAll() ) > 0) {
    +
    +} else {
    +    $conn->exec($insert);
    +}
    +$sql ="select userip from pageview";
    +$stmt = $conn->prepare($sql);
    +    $stmt->execute();
    +
    +    // set the resulting array to associative
    +    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);
    +   echo "You are vistor: ".sizeOf($stmt->fetchAll() );
    +$conn = null;
    +
    +    }
    +catch(PDOException $e)
    +    {
    +    echo "Connection failed: " . $e->getMessage();
    +    }
    +?>
    +

Running handlers:
Running handlers complete
Chef Client finished, 11/11 resources updated in 01 minutes 53 seconds
